module.exports = defaultQuestion = [{
  title: 'Cat Years, Dog Years',
  question: "<span>I have a cat and a dog which I got as a kitten and a puppy. I forget when that was, but I do know their current ages as catYears and dogYears.<br> Find how long I have owned each of my pets and return as a list [ownedCat, ownedDog]</span><br><h3>Results are truncated whole numbers of 'human' years</h3><br><h3>Cat Years</h3><ul><li>15 cat years for first year</li><li>+9 cat years for second year</li><li>+4 cat years for each year after that</li></ul><br><h3>Dog Years</h3><ul><li>15 dog years for first year</li><li>+9 dog years for second year</li><li>+5 dog years for each year after that</li></ul>",
  hint: '<span>function ownedCatAndDog(catYears, dogYears) { <br> //write your code here <br> return humanYears <br> } </span>',
  solution: '<span>var ownedCatAndDog = function(catYears, dogYears) {<br>    var ownedCat = 0;<br>    var ownedDog = 0;<br>    if (catYears>=15) {<br>      ownedCat = 1;<br>    };<br>        if ((catYears-15) >= 9) {<br>    ownedCat = 2;<br>    };<br>    if ((catYears-24) >=4) {<br>    ownedCat = 2 + Math.trunc((catYears-24)/4);<br>    };<br>    if (dogYears >= 15) { <br>       ownedDog = 1;<br>    }<br>    if ((dogYears-15) >= 9) { <br>     ownedDog = 2;<br>    }<br>    if ((dogYears-24) >= 5) {<br>     ownedDog = 2 + Math.trunc((dogYears-24)/5);<br>    }<br>    return [ownedCat,ownedDog];<br>  }</span>'
}, {
  title: 'Find the needle in the Haystack',
  question: "<span>You are attempting to find the index of the first appearance of one string (the needle) inside of another (the haystack).<span><br><h3>Examples</h3><br><ul><li>indexOf('or', 'hello world'); // should return 7</li><li>indexOf('hello world', 'or'); // should return -1</li><li>indexOf('howdy', 'hello world'); // should return -1</li></ul><br><ul><li>Do not use any built-in string methods like 'indexOf()', 'includes()' or 'substring()'</li></ul>",
  hint: '<span>The brute force approach would involve splitting the haystack into an array of characters and then looping through them.  Could this be done without generating a second copy of the haystack? </span>',
  solution: '<br><div style="background: #ffffff; overflow:auto;width:auto;gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">function</span> indexOf (needle, haystack) {<br> <span style="color: #0000ff">for</span> (<span style="color: #0000ff">let</span> hIdx = 0; hIdx &lt;= haystack.length - needle.length; hIdx++) {<br> <span style="color: #0000ff">for</span> (<span style="color: #0000ff">let</span> nIdx = 0; nIdx &lt; needle.length; nIdx++) {<br> <span style="color: #0000ff">if</span> (haystack[hIdx + nIdx] !== needle[nIdx]) <span style="color: #0000ff">break</span>;<br> <span style="color: #0000ff">if</span> (nIdx + 1 === needle.length) <span style="color: #0000ff">return</span> hIdx;<br> }<br> }<br> <span style="color: #0000ff">return</span> -1;<br> </pre></div><br><br>'
  },
  {
    title: 'Find the needle in the Haystack2',
    question: "<span>You are attempting to find the index of the first appearance of one string (the needle) inside of another (the haystack).<span><br><h3>Examples</h3><br><ul><li>indexOf('or', 'hello world'); // should return 7</li><li>indexOf('hello world', 'or'); // should return -1</li><li>indexOf('howdy', 'hello world'); // should return -1</li></ul><br><ul><li>Do not use any built-in string methods like 'indexOf()', 'includes()' or 'substring()'</li></ul>",
    hint: '<span>The brute force approach would involve splitting the haystack into an array of characters and then looping through them.  Could this be done without generating a second copy of the haystack? </span>',
    solution: '<div style="background: #ffffff; overflow:auto;width:auto;gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">function</span> indexOf (needle, haystack) {<br> <span style="color: #0000ff">for</span> (<span style="color: #0000ff">let</span> hIdx = 0; hIdx &lt;= haystack.length - needle.length; hIdx++) {<br> <span style="color: #008000">//O(n * ...) where n is the number of letters in haystack</span><br> <span style="color: #0000ff">for</span> (<span style="color: #0000ff">let</span> nIdx = 0; nIdx &lt; needle.length; nIdx++) {<br> <span style="color: #008000">//O(m * ...) where m is the number of letters in needle</span><br> <span style="color: #0000ff">if</span> (haystack[hIdx + nIdx] !== needle[nIdx]) <span style="color: #0000ff">break</span>;<br> <span style="color: #008000">//O(1) constant</span><br> <span style="color: #0000ff">if</span> (nIdx + 1 === needle.length) <span style="color: #0000ff">return</span> hIdx;<br> <span style="color: #008000">//O(1) constant</span><br> }<br> }<br> <span style="color: #0000ff">return</span> -1; O(1) constant<br> }<br> </pre></div>'
    }
]

